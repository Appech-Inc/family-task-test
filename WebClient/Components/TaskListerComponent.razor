@using WebClient.Abstractions
@using Domain.ViewModel

@inject ITaskDataService taskService;
@inject IMemberDataService memberService;
@inject IJSRuntime JSRuntime

@namespace WebClient.Components

<style>
    .task-wrapper .task-item {
        background: #FFFFFF;
        border: 1px solid #C5C9C9;
        box-sizing: border-box;
        border-radius: 8px;
        font-size: 24px;
        font-family: "Poppins Light";
    }
    .done-text {
        text-decoration: line-through;
    }
    .task-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }
    @@media(max-width: 1400px) { 
        .task-wrapper .task-item { 
            font-size: 16px;
        }
        .task-wrapper .avtar {
            width: 24px;
            height: 24px;
        }
        .delete-icon {
            width: 25px;
        }
    }
    @@media(max-width: 767.98px) {
        .task-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }
    .task-wrapper .task-item[draggable="true"] {
        cursor: grab;
    }
</style>

<div class="task-wrapper">
    @foreach (var item in tasks)
    {
        <div class="task-item p-3 my-3 row m-0 draggable"
             draggable="true"
             @ondragstart="@(() => taskService.SelectDraggedTask(item.Id))">
            <div class="col-10 p-0">
                <Check Name="@item.Id.ToString()" TValue="bool" Checked="@item.IsComplete" CheckedChanged="@(val => ToggleTask(item))">
                    <span class="@(item.IsComplete ? "done-text" : "")">@item.Subject</span>
                </Check>
            </div>
            <div class="col-2 p-0 d-flex justify-content-end align-items-center">
                @if (item.AssignedToId != null && selectedMember != null) {
                    <div class="avtar mr-1" style="background-color: @selectedMember.Avatar;"></div>
                }
                <img class="delete-icon" src="/assets/images/delete-icon.svg"/>
            </div>
        </div>
    }
</div>

@code  {
    private IEnumerable<TaskVm> tasks = new List<TaskVm>();
    private MemberVm selectedMember;

    protected override Task OnInitializedAsync()
    {
        memberService.SelectedMemberChanged += MemberServiceOnSelectedMemberChanged;
        taskService.TasksUpdated += TaskServiceOnTasksUpdated;
        taskService.CompleteTaskFailed += TaskServiceOnCompleteTaskFailed;
        LoadCurrentTasks();
        return base.OnInitializedAsync();
    }

    private async Task ToggleTask(TaskVm model)
    {
        if (!model.IsComplete)
        {
            model.IsComplete = true;
            await taskService.ToggleTask(model.Id);
            StateHasChanged();
        }
    }

    private void TaskServiceOnTasksUpdated(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void MemberServiceOnSelectedMemberChanged(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void TaskServiceOnCompleteTaskFailed(object sender, string message)
    {
        LoadCurrentTasks();
    }

    private void LoadCurrentTasks()
    {
        selectedMember = memberService.SelectedMember;

        if (selectedMember == null || selectedMember.Id == Guid.Empty)
        {
            tasks = taskService.Tasks ?? new List<TaskVm>();
            StateHasChanged();
            return;
        };

        tasks = taskService.Tasks.Where(t => t.AssignedToId == selectedMember.Id).ToList();
        StateHasChanged();
    }

}